import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

  static int[] unf;

  // 해당 친구가 가진 가장 먼 친구를 찾아 반환한다.
  public static int Find(int v) {
    if (v == unf[v]) return unf[v];
    else return unf[v] = Find(unf[v]);
  }

  // 두 학생을 친구로 만드는 함수
  public static void Union(int a, int b) {
    int fa = Find(a);           // a 가 가진 가장 먼 친구 fa
    int fb = Find(b);           // b 가 가진 가장 먼 친구 fb
    if (fa != fb) unf[fa] = fb; // fa 가 fb 를 참조하도록 만든다.
  }

  public static void main(String[] args) throws IOException {

    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    int n = Integer.parseInt(st.nextToken());
    int m = Integer.parseInt(st.nextToken());

    unf = new int[n + 1];
    for (int i = 1; i < n + 1; i++) unf[i] = i;
    for (int i = 0; i < m; i++) {
      st = new StringTokenizer(br.readLine());
      int a = Integer.parseInt(st.nextToken());
      int b = Integer.parseInt(st.nextToken());
      Union(a, b);
    }

    st = new StringTokenizer(br.readLine());
    int studentA = Integer.parseInt(st.nextToken());
    int studentB = Integer.parseInt(st.nextToken());

    int fa = Find(studentA);
    int fb = Find(studentB);
    String answer = fa == fb ? "YES" : "NO";

    System.out.println(answer);
  }
}
